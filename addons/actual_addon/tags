!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/media/makar/NV1/CCCaster/addons/actual_addon/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/dd87bd3/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
CC_LOOP_START_ADDR	src/main.cpp	/^#define CC_LOOP_START_ADDR /;"	d	file:
CC_WORLD_TIMER_ADDR	patch_callbacks/src/patch_callbacks.cpp	/^#define CC_WORLD_TIMER_ADDR /;"	d	file:
DX_MUTED_VOLUME	src/main.cpp	/^#define DX_MUTED_VOLUME /;"	d	file:
DllMain	src/main.cpp	/^BOOL WINAPI DllMain( HMODULE hModule, DWORD dwReason, LPVOID lpReserved ) {$/;"	f	typeref:typename:BOOL WINAPI
HEAP_MEMORY_SIZE	patch_callbacks/src/patch_callbacks.cpp	/^#define HEAP_MEMORY_SIZE /;"	d	file:
IDirect3D9Ex$CreateDevice	addon_callbacks/src/addon_callbacks.cpp	/^    IDirect3D9Ex$CreateDevice( void** _callbackArguments ) {$/;"	f	typeref:typename:uint16_t
INLINE_DWORD	src/main.cpp	/^#define INLINE_DWORD(/;"	d	file:
MM_HOOK_CALL1_ADDR	src/main.cpp	/^#define MM_HOOK_CALL1_ADDR /;"	d	file:
MM_HOOK_CALL2_ADDR	src/main.cpp	/^#define MM_HOOK_CALL2_ADDR /;"	d	file:
PATCH	patch_t/include/patch_t.hpp	/^typedef struct PATCH {$/;"	s
PATCH	patch_t/src/patch_t.cpp	/^PATCH::PATCH( uintptr_t _address, std::vector< uint8_t > _bytes ) {$/;"	f	class:PATCH
PATCH	patch_t/src/patch_t.cpp	/^PATCH::PATCH( void ) {}$/;"	f	class:PATCH
WIN32_LEAN_AND_MEAN	addon_callbacks/include/addon_callbacks.hpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	patch_callbacks/src/patch_callbacks.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	patch_t/src/patch_t.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	src/main.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
_beginOffset1	applyInput/src/applyInput.cpp	/^    int64_t _beginOffset1;$/;"	m	struct:playerInputs_t	typeref:typename:int64_t	file:
_beginOffset2	applyInput/src/applyInput.cpp	/^    int64_t _beginOffset2;$/;"	m	struct:playerInputs_t	typeref:typename:int64_t	file:
_beginOffset3	applyInput/src/applyInput.cpp	/^    int64_t _beginOffset3;$/;"	m	struct:playerInputs_t	typeref:typename:int64_t	file:
_firstPlayerDirectionOffset1	applyInput/src/applyInput.cpp	/^    int32_t _firstPlayerDirectionOffset1;$/;"	m	struct:playerInputs_t	typeref:typename:int32_t	file:
_firstPlayerDirectionOffset2	applyInput/src/applyInput.cpp	/^    int32_t _firstPlayerDirectionOffset2;$/;"	m	struct:playerInputs_t	typeref:typename:int32_t	file:
address	patch_t/include/patch_t.hpp	/^    uintptr_t address = 0;$/;"	m	struct:PATCH	typeref:typename:uintptr_t
apply	patch_t/src/patch_t.cpp	/^bool PATCH::apply( uintptr_t _address, std::vector< uint8_t > _bytes ) {$/;"	f	class:PATCH	typeref:typename:bool
applyInput	applyInput/src/applyInput.cpp	/^void applyInput( button_t _buttons, direction_t _direction, player_t _player ) {$/;"	f	typeref:typename:void
bytesBackup	patch_t/include/patch_t.hpp	/^    std::vector< uint8_t > bytesBackup = {};$/;"	m	struct:PATCH	typeref:typename:std::vector<uint8_t>
characterSelectColorsCallback	patch_callbacks/src/patch_callbacks.cpp	/^void characterSelectColorsCallback( void ) {$/;"	f	typeref:typename:void
extraDrawCallback	patch_callbacks/src/patch_callbacks.cpp	/^void extraDrawCallback( void ) {$/;"	f	typeref:typename:void
extraTexturesCallBack	patch_callbacks/src/patch_callbacks.cpp	/^void extraTexturesCallBack( void ) {$/;"	f	typeref:typename:void
firstPlayerButtons	applyInput/src/applyInput.cpp	/^    button_t firstPlayerButtons;$/;"	m	struct:playerInputs_t	typeref:typename:button_t	file:
firstPlayerButtonsOffset1	applyInput/src/applyInput.cpp	/^    int32_t firstPlayerButtonsOffset1;$/;"	m	struct:playerInputs_t	typeref:typename:int32_t	file:
firstPlayerDirection	applyInput/src/applyInput.cpp	/^    direction_t firstPlayerDirection;$/;"	m	struct:playerInputs_t	typeref:typename:direction_t	file:
g_SFXFilter	patch_callbacks/src/patch_callbacks.cpp	/^uint8_t g_SFXFilter[ CC_SFX_ARRAY_LENGTH ] = { 0 };$/;"	v	typeref:typename:uint8_t[]
g_SFXMute	patch_callbacks/src/patch_callbacks.cpp	/^uint8_t g_SFXMute[ CC_SFX_ARRAY_LENGTH ] = { 0 };$/;"	v	typeref:typename:uint8_t[]
g_autoReplaySaveState	patch_callbacks/src/patch_callbacks.cpp	/^uint32_t* g_autoReplaySaveState;$/;"	v	typeref:typename:uint32_t *
g_currentMenuIndex	patch_callbacks/src/patch_callbacks.cpp	/^uint32_t g_currentMenuIndex = 0;$/;"	v	typeref:typename:uint32_t
g_enableEscapeToExit	patch_callbacks/src/patch_callbacks.cpp	/^bool g_enableEscapeToExit = false;$/;"	v	typeref:typename:bool
g_hFocusWindow	addon_callbacks/src/addon_callbacks.cpp	/^HWND g_hFocusWindow = NULL;$/;"	v	typeref:typename:HWND
g_menuConfirmState	patch_callbacks/src/patch_callbacks.cpp	/^uint32_t g_menuConfirmState = 0;$/;"	v	typeref:typename:uint32_t
g_roundStartCounter	patch_callbacks/src/patch_callbacks.cpp	/^uint32_t g_roundStartCounter = 0;$/;"	v	typeref:typename:uint32_t
g_useCallback	addon_callbacks/src/addon_callbacks.cpp	/^useCallbackFunction_t g_useCallback = NULL;$/;"	v	typeref:typename:useCallbackFunction_t
gameMainLoopCallback	patch_callbacks/src/patch_callbacks.cpp	/^void gameMainLoopCallback( void ) {$/;"	f	typeref:typename:void
getAddress	src/main.cpp	/^uintptr_t getAddress( uintptr_t _moduleAddress,$/;"	f	typeref:typename:uintptr_t
getModule	src/main.cpp	/^uintptr_t getModule( const char* _moduleName ) {$/;"	f	typeref:typename:uintptr_t
init	src/main.cpp	/^static void init( void ) {$/;"	f	typeref:typename:void	file:
loadingColorsCallback	patch_callbacks/src/patch_callbacks.cpp	/^void loadingColorsCallback( void ) {$/;"	f	typeref:typename:void
operator !	patch_t/src/patch_t.cpp	/^bool PATCH::operator!( void ) const {$/;"	f	class:PATCH	typeref:typename:bool
operator ==	patch_t/src/patch_t.cpp	/^bool PATCH::operator==( const PATCH& _other ) const {$/;"	f	class:PATCH	typeref:typename:bool
patch_t	patch_t/include/patch_t.hpp	/^} patch_t;$/;"	t	typeref:struct:PATCH
playerInputs_t	applyInput/src/applyInput.cpp	/^struct playerInputs_t {$/;"	s	file:
secondPlayerButtons	applyInput/src/applyInput.cpp	/^    button_t secondPlayerButtons;$/;"	m	struct:playerInputs_t	typeref:typename:button_t	file:
secondPlayerDirection	applyInput/src/applyInput.cpp	/^    direction_t secondPlayerDirection;$/;"	m	struct:playerInputs_t	typeref:typename:direction_t	file:
secondPlayerDirectionOffset1	applyInput/src/applyInput.cpp	/^    int32_t secondPlayerDirectionOffset1;$/;"	m	struct:playerInputs_t	typeref:typename:int32_t	file:
status	patch_t/include/patch_t.hpp	/^    bool status = false;$/;"	m	struct:PATCH	typeref:typename:bool
~PATCH	patch_t/src/patch_t.cpp	/^PATCH::~PATCH() {$/;"	f	class:PATCH
